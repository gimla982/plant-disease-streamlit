# -*- coding: utf-8 -*-
"""Untitled54.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RWA8OUpgqoj7nK8QUH7FVLB7YyZGSRou
"""

# app.py
import streamlit as st
import numpy as np
from PIL import Image
import tensorflow as tf
import json

st.set_page_config(page_title="🍃 Plant Health Checker", page_icon="🌱", layout="centered")
st.title("🌱 Plant Doctor – אבחון מחלות בעלים")
st.markdown("**העלה תמונה של עלה, וקבל אבחון מהיר: בריא או חולה, כולל טיפול 🧪**")

# ✅ טעינת המודל המאומן
@st.cache_resource
def load_model():
    return tf.keras.models.load_model("mobilenetv2_plant_disease_model.h5")

model = load_model()

# ✅ תוויות המחלקות (באותו סדר בו אומן המודל!)
CLASS_LABELS = [
    "Healthy",
    "Tomato___Early_blight",
    "Tomato___Late_blight",
    "Tomato___Leaf_Mold",
    "Tomato___Septoria_leaf_spot",
    "Tomato___Spider_mites",
    "Tomato___Target_Spot",
    "Tomato___Tomato_Yellow_Leaf_Curl_Virus"
]

# ✅ המלצות טיפול לפי סוג המחלה
TREATMENTS = {
    "Tomato___Early_blight": "🌱 הסר עלים חולים והשתמש בקוטל פטריות מבוסס נחושת.",
    "Tomato___Late_blight": "🌧️ אל תשקה עלים ישירות. רסס בקוטל פטריות מערכתי.",
    "Tomato___Leaf_Mold": "💨 אוורור מוגבר בחממה. רסס בקוטל טבעי.",
    "Tomato___Septoria_leaf_spot": "🕒 השקיה בשעות בוקר בלבד. הסר עלים נגועים.",
    "Tomato___Spider_mites": "🕷️ השתמש בשמן נים או סבון חרקים.",
    "Tomato___Target_Spot": "💉 רסס בתכשיר קוטל פטריות סיסטמי.",
    "Tomato___Tomato_Yellow_Leaf_Curl_Virus": "🚫 אין טיפול. מומלץ להסיר את הצמח ולמנוע התפשטות.",
}

# ✅ העלאת תמונה
uploaded_file = st.file_uploader("📸 העלה תמונה של העלה שלך", type=["jpg", "jpeg", "png"])

if uploaded_file:
    image = Image.open(uploaded_file).convert('RGB')
    st.image(image, caption="📷 תמונה שנטענה", use_column_width=True)

    # עיבוד התמונה
    img = image.resize((224, 224))
    img_array = np.array(img) / 255.0
    img_batch = np.expand_dims(img_array, axis=0)

    # ניבוי
    prediction = model.predict(img_batch)
    predicted_index = np.argmax(prediction)
    predicted_label = CLASS_LABELS[predicted_index]
    confidence = prediction[0][predicted_index]

    st.markdown("---")
    st.subheader("🔍 תוצאה:")

    if predicted_label == "Healthy":
        st.success(f"✅ העלה בריא! ({confidence*100:.1f}% ביטחון)")
        st.balloons()
    else:
        st.error(f"⚠️ העלה חולה: **{predicted_label}** ({confidence*100:.1f}% ביטחון)")
        st.markdown(f"💡 **המלצה לטיפול:** {TREATMENTS.get(predicted_label, '🧾 אנא התייעץ עם מומחה.')}")